#!/usr/bin/python3

import sys
import rospy
import dlib
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
from rins_task_1.msg import msg_face
import face_recognition

class face_localizer:
	def __init__(self):
		rospy.init_node('face_localizer', anonymous=True)

		# An object we use for converting images between ROS format and OpenCV format
		self.bridge = CvBridge()

		# The function for performin HOG face detection
		self.face_detector = dlib.get_frontal_face_detector()

		# A help variable for holding the dimensions of the image
		self.dims = (0, 0, 0)

		# Marker array object used for showing markers in Rviz
		self.marker_array = MarkerArray()
		self.temp_marker_array = MarkerArray()
		self.marker_num = 1

		# Duration dictionary object used for checking marker duration
		self.duration_dict = {}
		self.msg_face_array = msg_face()

		# Subscribe to the image and/or depth topic
		# self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
		# self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

		# Publiser for the visualization markers
		self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)
		self.face_pub = rospy.Publisher('face_topic', msg_face, queue_size=1000)

		# Object we use for transforming between coordinate frames
		self.tf_buf = tf2_ros.Buffer()
		self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

		print("BBBBBBBBBBBBBBB")
		print("BBBBBBBBBBBBBBB")
		print("BBBBBBBBBBBBBBB")
		print("BBBBBBBBBBBBBBB")

	def get_pose(self,coords,dist,stamp):
		# Calculate the position of the detected face

		k_f = 554 # kinect focal length in pixels

		x1, x2, y1, y2 = coords

		face_x = self.dims[1] / 2 - (x1+x2)/2.
		face_y = self.dims[0] / 2 - (y1+y2)/2.

		angle_to_target = np.arctan2(face_x,k_f)

		# Get the angles in the base_link relative coordinate system
		x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

		### Define a stamped message for transformation - directly in "base_link"
		#point_s = PointStamped()
		#point_s.point.x = x
		#point_s.point.y = y
		#point_s.point.z = 0.3
		#point_s.header.frame_id = "base_link"
		#point_s.header.stamp = rospy.Time(0)

		# Define a stamped message for transformation - in the "camera rgb frame"
		point_s = PointStamped()
		point_s.point.x = -y
		point_s.point.y = 0
		point_s.point.z = x
		point_s.header.frame_id = "camera_rgb_optical_frame"
		point_s.header.stamp = stamp

		# Get the point in the "map" coordinate system
		try:
			point_world = self.tf_buf.transform(point_s, "map")

			# Create a Pose object with the same position
			pose = Pose()
			pose.position.x = point_world.point.x
			pose.position.y = point_world.point.y
			pose.position.z = point_world.point.z
		except Exception as e:
			print(e)
			pose = None

		return pose
	

	def find_faces(self):
		print('I got a new image!')

		# Get the next rgb and depth images that are posted from the camera
		try:
			rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
		except Exception as e:
			print(e)
			return 0

		try:
			depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
		except Exception as e:
			print(e)
			return 0

		# Convert the images into a OpenCV (numpy) format

		try:
			rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
		except CvBridgeError as e:
			print(e)

		try:
			depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
		except CvBridgeError as e:
			print(e)

		# Set the dimensions of the image
		self.dims = rgb_image.shape

		# Tranform image to gayscale
		#gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

		# Do histogram equlization
		#img = cv2.equalizeHist(gray)

		# Detect the faces in the image
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		# print("asasasasasa")
		face_locations = face_recognition.face_locations(rgb_image)	
		# print(face_locations)
		
		# face_rectangles = self.face_detector(rgb_image, 0)
		# print(face_rectangles)

		# For each detected face, extract the depth from the depth image
		# for face_rectangle in face_rectangles:
		for face_location in face_locations:

			print('Faces were detected')
			# print(face_rectangles[0])

			# The coordinates of the rectanle
			# x1 = face_rectangle.left()
			# x2 = face_rectangle.right()
			# y1 = face_rectangle.top()
			# y2 = face_rectangle.bottom()

			# print(x1)
			# print(x2)
			# print(y1)
			# print(y2)

			(top, right, bottom, left)=face_location
			x1 = left
			x2 = right
			y1 = top 
			y2 = bottom

			# Extract region containing face
			face_region = rgb_image[y1:y2,x1:x2]

			# Visualize the extracted face
			# cv2.imshow("Depth window", face_region)
			# cv2.waitKey(1)

			# Find the distance to the detected face
			face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

			print('Distance to face', face_distance)

			# Get the time that the depth image was recieved
			depth_time = depth_image_message.header.stamp

			# Find the location of the detected face
			pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time)
			
			if pose is not None:
				minSum = float('inf')
				minId = -1
				for marker in self.temp_marker_array.markers:
					face = marker.pose
					tempSum =  np.power(pose.position.x - face.position.x, 2)
					tempSum +=  np.power(pose.position.y - face.position.y, 2)
					tempSum +=  np.power(pose.position.z - face.position.z, 2)
					if(minSum > tempSum):
						minSum = tempSum
						minId = marker.id
					tempSum = 0

				if(minSum > 0.5):
					print('Making new marker at x:'+ str(pose.position.x) +' y: '+ str(pose.position.y) +' z: '+ str(pose.position.z))
					# Create a marker used for visualization
					self.marker_num += 1
					marker = Marker()
					marker.header.stamp = rospy.Time(0)
					marker.header.frame_id = 'map'
					marker.pose = pose
					marker.type = Marker.CUBE
					marker.action = Marker.ADD
					marker.frame_locked = False
					marker.lifetime = rospy.Duration.from_sec(10)
					marker.id = self.marker_num
					marker.scale = Vector3(0.1, 0.1, 0.1)
					marker.color = ColorRGBA(0, 1, 0, 1)
					self.temp_marker_array.markers.append(marker)
					self.duration_dict[self.marker_num] = {"times_seen": 1, "last_seen": rospy.get_time()}

	
				else:
					for marker in self.temp_marker_array.markers:
						if minId == marker.id:
							face = marker.pose
							times_seen = self.duration_dict[minId]["times_seen"]
							face.position.x = (pose.position.x + times_seen * face.position.x)/(times_seen + 1)
							face.position.y = (pose.position.y + times_seen * face.position.y)/(times_seen + 1)
							face.position.z = (pose.position.z + times_seen * face.position.z)/(times_seen + 1)
							self.duration_dict[minId]["times_seen"] += 1
							times_seen = self.duration_dict[minId]["last_seen"] =  rospy.get_time()
							for seenMarker in self.marker_array.markers:
								if(minId == seenMarker.id):
									seenFace = seenMarker.pose
									seenFace.position.x = face.position.x
									seenFace.position.y = face.position.y
									seenFace.position.z = face.position.z

									self.msg_face_array.x.append(seenFace.position.x)
									self.msg_face_array.y.append(seenFace.position.y)
									self.msg_face_array.z.append(seenFace.position.z)
							print('Updating marker at x:'+ str(face.position.x) +' y: '+ str(face.position.y) +' z: '+ str(face.position.z))
							break
				self.face_pub.publish(self.msg_face_array)
				self.markers_pub.publish(self.marker_array)

	def clean_markers(self):
		currentTime = rospy.get_time()
		deleteList = []
		for marker in self.temp_marker_array.markers:
			if(self.duration_dict[marker.id]["times_seen"] < 3):
				if(currentTime - self.duration_dict[marker.id]["last_seen"] > 5):
					deleteList.append(marker)
					face = marker.pose
					print('Deleteing  marker at x:'+ str(face.position.x) +' y: '+ str(face.position.y) +' z: '+ str(face.position.z))
			else:
				if(marker not in self.marker_array.markers):
					self.marker_array.markers.append(marker)
					self.msg_face_array.x.append(marker.pose.position.x)
					self.msg_face_array.y.append(marker.pose.position.y)
					self.msg_face_array.z.append(marker.pose.position.z)

				
		for marker in deleteList:
			del self.duration_dict[marker.id]
			self.temp_marker_array.markers.remove(marker)

		self.face_pub.publish(self.msg_face_array)
		self.markers_pub.publish(self.marker_array)
		

		



	def depth_callback(self,data):

		try:
			depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
		except CvBridgeError as e:
			print(e)

		# Do the necessairy conversion so we can visuzalize it in OpenCV
		
		image_1 = depth_image / np.nanmax(depth_image)
		image_1 = image_1*255
		
		image_viz = np.array(image_1, dtype=np.uint8)

		#cv2.imshow("Depth window", image_viz)
		#cv2.waitKey(1)

		#plt.imshow(depth_image)
		#plt.show()

def main():

		face_finder = face_localizer()

		rate = rospy.Rate(1)
		while not rospy.is_shutdown():
			face_finder.find_faces()
			face_finder.clean_markers()
			rate.sleep()

		cv2.destroyAllWindows()


if __name__ == '__main__':
	main()
